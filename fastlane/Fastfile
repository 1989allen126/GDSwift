desc 'Usage help'
lane :usage do |options|
  UI.message("input")
  UI.message("fastlane release version:{version_number}") 
  UI.message("or")
  UI.message("fastlane release version:{version_number} message:{version_message}") 
end

desc 'Release new version'
lane :pushGit do |options|

  target_version = options[:version]
  version_message = options[:message]
  raise "The version is missed. Use `fastlane pushGit version:{version_number}`.`" if target_version.nil?
  
  version_bump_podspec(
    path: "GDSwift.podspec", 
    version_number: target_version
  )

  git_add(path: ".")
  git_commit(path: ".", message: "Bump version to #{target_version}")

  if git_tag_exists(tag: target_version)
    UI.message("remote the existing tag #{target_version} automatically") 
    remove_git_tag(tagNum: target_version)
  end

  if version_message.nil?
    add_git_tag(
      tag: target_version
    )
  else
    add_git_tag(
      tag: target_version,
      message: version_message
    )
  end

  
  push_git_tags
  push_to_git_remote
  
end

lane :release do |options|

  target_version = options[:version]
  version_message = options[:message]
  
  # repo 
	target_repoName = options[:repo]
	# podspec
  target_podspec_name = options[:podspec]
  
  if target_repoName.nil?
		target_repoName = "AllenSpecs"
  end
  
  # HSBKit
  if target_podspec_name.nil?
		target_podspec_name = "GDSwift.podspec"
  end
  
  raise "The version is missed. Use `fastlane release version:{version_number}`.`" if target_version.nil?
  
  version_bump_podspec(
    path: target_podspec_name, 
    version_number: target_version
  )

  git_add(path: ".")
  git_commit(path: ".", message: "Bump version to #{target_version}")

  if git_tag_exists(tag: target_version)
    UI.message("remote the existing tag #{target_version} automatically") 
    remove_git_tag(tagNum: target_version)
  end

  if version_message.nil?
    add_git_tag(
      tag: target_version
    )
  else
    add_git_tag(
      tag: target_version,
      message: version_message
    )
  end

  
  push_git_tags
  push_to_git_remote

  pod_lib_lint(allow_warnings: true)

  #pod_push
  # pod_repo_push(repo: target_repoName, podspec: "#{target_podspec_name}")
	pod_push(path: "#{target_podspec_name}", repo: "#{target_repoName}", allow_warnings: true,skip_import_validation:true)

end